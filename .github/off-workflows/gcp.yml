# Ctrl+F AND REPLACE ALL INSTANCES OF "ORGANIZATION".
# MORE INFO: https://github.com/MassimilianoDH/terraform-push
---
name: "Terraform ORGANIZATION GCP"

# You can define single or multiple events that can a trigger workflow, or set a time schedule. 
# You can also restrict the execution of a workflow to only occur for specific files, tags, or branch changes.
# More info: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on
on:
  push:
    branches:
      - master
  pull_request:

env:
  # Needed for auth.
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
  # Needed to comment plan output in PR discussion.
  TF_VAR_github_owner: ORGANIZATION
  TF_VAR_github_token: ${{ secrets.PAT_TOKEN }}

jobs:
  # Job to list sub-directories.
  # More info: https://github.com/MassimilianoDH/terraform-push/.github/actions/list-directories/action.yml
  list-dirs:
    name: List Directories
    runs-on: ubuntu-latest
    outputs:
      # Expose list as job 'list' output variable.
      list: ${{ steps.list-dirs.outputs.list }}
    steps:
      # For pull requests it's not necessary to checkout the code.
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: List Directories   
        uses: ./.github/actions/list-directories
        id: list-dirs
        with:
          path: ./stacks/

  # Job to run change detection.
  # More info: https://github.com/dorny/paths-filter#conditional-execution:~:text=Use%20change%20detection
  changes:
    name: Changes Detection
    needs: [list-dirs]
    runs-on: ubuntu-latest
    outputs:
      # Expose matched filters as job 'stacks' output variable.
      stacks: ${{ steps.filter.outputs.changes }}
    steps:
      # For pull requests it's not necessary to checkout the code.
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Filter
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: 
            "${{ needs.list-dirs.outputs.list }}"

  # Job to test and apply each of modified stacks.
  # More info: https://github.com/hashicorp/setup-terraform
  terraform:
    name: Terraform ORGANIZATION 
    needs: [changes]
    runs-on: ubuntu-latest
    # More info: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategy
    strategy:
      # Fail-fast applies to the entire matrix. 
      # If fail-fast is set to true, GitHub will cancel all in-progress and queued jobs in the matrix if any job in the matrix fails. 
      # This property defaults to true.
      fail-fast: false
      matrix:
        # Parse JSON array containing names of all filters matching any of changed files.
        # e.g. ['stack', 'stack'] if both stack folders contains changes.
        stack: ${{ fromJSON(needs.changes.outputs.stacks) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Verify Terraform Version
        run: terraform --version

      # Needed for private Git repositories.
      # https://github.com/webfactory/ssh-agent
      - name: Setup SSH for Terraform Modules
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}
    
      # Needed for private storage buckets.
      # More info:
      # AWS Credentials: https://github.com/aws-actions/configure-aws-credentials
      # GCP Auth: https://github.com/google-github-actions/auth
      # Azure Login: https://github.com/Azure/login
      - name: GCP Auth
        uses: google-github-actions/auth@v0
        id: auth
        with:
          credentials_json: ${{ env.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up Cloud SDK with CI Credentials
        uses: google-github-actions/setup-gcloud@v0

      # Terraform format, init, validate and plan workflow.
      - name: Check Terraform Formatting
        id: fmt
        run: make format-check

      - name: Terraform Init
        id: init
        run: |
          echo "Initializing ORGANIZATION ${{ matrix.stack }}" 
          make init-${{ matrix.stack }}

      - name: Terraform Validation
        id: validate
        if: github.event_name == 'pull_request'
        run: |
          echo "Validating Config ORGANIZATION ${{ matrix.stack }}" 
          make validate-${{ matrix.stack }}

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          make plan-${{ matrix.stack }}

      # Expose Terraform plan as environment variable.
      - name: Truncate Terraform Plan Result
        run: |
          plan=$(cat <<'EOF'
          ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
          EOF
          )
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "${plan:0:65536}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      # More info: https://github.com/hashicorp/setup-terraform#:~:text=Outputs%20can%20be%20used
      - name: Comment Plan Output in PR Discussion
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ env.TF_VAR_github_token }}
          script: |
            const output = `#### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`
             <details><summary>Show Plan for ORGANIZATION ${{ matrix.stack }}</summary>
             \`\`\`\n             
             ${process.env.PLAN}
             \`\`\`
             </details>
             *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
             github.rest.issues.createComment({
               issue_number: context.issue.number,
               owner: context.repo.owner,
               repo: context.repo.repo,
               body: output
             })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # Apply Terrafrom plan when merging or pushing to master.
      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          make plan-${{ matrix.stack }}
          echo "Applying ORGANIZATION ${{ matrix.stack }}"
          make apply-${{ matrix.stack }}
